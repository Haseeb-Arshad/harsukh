import React, { useEffect, useRef, useState } from 'react';
import Header from './parts/header';
import Vision from './parts/vision';
import AboutUs from './parts/aboutus';
import CeoVision from './parts/ceoVision';
import Footer from './parts/footer';
import VideoContent from './parts/videoContent';
import Navbar from './parts/navbar';
import Developer from './parts/developer';
import styles from '@/styles/home/main.module.css';

const sections = [
  { id: 'header', component: Header },
  { id: 'video', component: VideoContent },
  { id: 'about', component: AboutUs },
  { id: 'vision', component: Vision },
  { id: 'developer', component: Developer },
  { id: 'ceo-vision', component: CeoVision },
];

export default function HomePage() {
  const containerRef = useRef(null);
  const sectionRefs = useRef([]);
  const [currentSection, setCurrentSection] = useState(0);
  const [isScrolling, setIsScrolling] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const scrollToSection = (index) => {
    if (index < 0 || index >= sections.length || isScrolling) return;
    setIsScrolling(true);
    setCurrentSection(index);
    
    if (isMobile) {
      sectionRefs.current[index].scrollIntoView({ behavior: 'smooth' });
    } else {
      containerRef.current.style.transform = `translateY(-${index * 100}vh)`;
    }
    
    setTimeout(() => setIsScrolling(false), 1000);
  };

  const handleScroll = (direction) => {
    if (direction === 'up' && currentSection > 0) {
      scrollToSection(currentSection - 1);
    } else if (direction === 'down' && currentSection < sections.length - 1) {
      scrollToSection(currentSection + 1);
    }
  };

  useEffect(() => {
    if (isMobile) return;

    const container = containerRef.current;
    if (!container) return;

    let touchStartY = 0;
    let touchEndY = 0;

    const handleWheel = (e) => {
      e.preventDefault();
      if (e.deltaY > 0) {
        handleScroll('down');
      } else if (e.deltaY < 0) {
        handleScroll('up');
      }
    };

    const handleTouchStart = (e) => {
      touchStartY = e.touches[0].clientY;
    };

    const handleTouchMove = (e) => {
      touchEndY = e.touches[0].clientY;
    };

    const handleTouchEnd = () => {
      if (touchStartY - touchEndY > 50) {
        handleScroll('down');
      } else if (touchEndY - touchStartY > 50) {
        handleScroll('up');
      }
    };

    const handleKeyDown = (e) => {
      if (e.key === 'ArrowDown') {
        handleScroll('down');
      } else if (e.key === 'ArrowUp') {
        handleScroll('up');
      }
    };

    container.addEventListener('wheel', handleWheel, { passive: false });
    container.addEventListener('touchstart', handleTouchStart);
    container.addEventListener('touchmove', handleTouchMove);
    container.addEventListener('touchend', handleTouchEnd);
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      container.removeEventListener('wheel', handleWheel);
      container.removeEventListener('touchstart', handleTouchStart);
      container.removeEventListener('touchmove', handleTouchMove);
      container.removeEventListener('touchend', handleTouchEnd);
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentSection, isScrolling, isMobile]);

  useEffect(() => {
    if (!isMobile) return;

    const handleScroll = () => {
      const currentScrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      
      sectionRefs.current.forEach((ref, index) => {
        if (ref && ref.offsetTop <= currentScrollPosition + windowHeight / 2) {
          setCurrentSection(index);
        }
      });
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isMobile]);

  return (
    <div className={styles.container}>
      <Navbar currentSection={sections[currentSection].id} />
      <nav className={styles.nav}>
        {sections.map((section, index) => (
          <button
            key={section.id}
            onClick={() => scrollToSection(index)}
            className={`${styles.navButton} ${index === currentSection ? styles.active : ''}`}
            aria-label={`Scroll to ${section.id}`}
          >
            <span className={styles.navDot}></span>
          </button>
        ))}
      </nav>
      <div ref={containerRef} className={`${styles.sectionContainer} ${isMobile ? styles.mobileContainer : ''}`}>
        {sections.map((Section, index) => (
          <section 
            key={Section.id} 
            id={Section.id} 
            ref={(el) => (sectionRefs.current[index] = el)}
            className={`${styles.section} ${isMobile ? styles.mobileSection : ''}`}
          >
            <Section.component />
          </section>
        ))}
      </div>
    </div>
  );
}
